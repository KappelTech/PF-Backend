name: Deploy to AWS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Check out code
        uses: actions/checkout@v4

       - name: Set up environment variables
        env:
          MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

      # Step 2: Set up AWS credentials and region
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  # Set your AWS region here

      # Step 2: Log in to AWS ECR
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      # Step 3: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t progression-fitness-backend .
          docker tag progression-fitness-backend:latest ${{ secrets.AWS_ECR_REPOSITORY_URI }}:latest

      # Step 4: Push the image to ECR
      - name: Push to ECR
        run: |
          docker push ${{ secrets.AWS_ECR_REPOSITORY_URI }}:latest

      # - name: Copy docker-compose.yml to EC2
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.SSH_KEY }}
      #     source: ./docker-compose.yml
      #     target: /home/ec2-user/docker-compose.yml

        # Step 4: SSH to EC2 and Deploy Container
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Log in to ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPOSITORY_URI }}
            # Pull the latest image
            docker pull ${{ secrets.AWS_ECR_REPOSITORY_URI }}:latest
            Stop and remove the old container if it exists
            docker stop progression-fitness-backend || true
            docker rm progression-fitness-backend || true
            # Run the new container
            docker run -d --name progression-fitness-backend -p 3000:3000 ${{ secrets.AWS_ECR_REPOSITORY_URI }}:latest
            # cd /home/ec2-user
            #  # Run docker-compose for production setup
            # docker-compose -f docker-compose.yml down || true
            # docker-compose -f docker-compose.yml up -d app-prod
